<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Ercan Akyürek</title><link>https://ercanakyuerek.de/</link><description>Recent content on Ercan Akyürek</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Tue, 07 Mar 2023 00:30:20 +0100</lastBuildDate><atom:link href="https://ercanakyuerek.de/index.xml" rel="self" type="application/rss+xml"/><item><title>Roller Coaster Simulation - Improved spline interpolation</title><link>https://ercanakyuerek.de/posts/roller-coaster-simulation/improved-spline-interpolation/</link><pubDate>Tue, 07 Mar 2023 00:30:20 +0100</pubDate><guid>https://ercanakyuerek.de/posts/roller-coaster-simulation/improved-spline-interpolation/</guid><description>In the latest update, a number of bugs were discovered, particularly in the precision of floating point calculations when working with a web assembly module in a browser environment. It was found that the jitters mentioned earlier were actually caused by a bug in the roll interpolation process.
To give a brief overview, track interpolation involves estimating the length of a NURBS track by interpolating with a large step size and evaluating nodes based on the estimated length, resulting in a dense enough interpolation.</description></item><item><title>Writing a Library in C++ and Using it in the Browser with the WASI SDK - JavaScript module</title><link>https://ercanakyuerek.de/posts/wasi/wasi-sdk-writing-library-in-cpp-4/</link><pubDate>Mon, 27 Feb 2023 17:45:00 +0100</pubDate><guid>https://ercanakyuerek.de/posts/wasi/wasi-sdk-writing-library-in-cpp-4/</guid><description>If you haven&amp;rsquo;t read the third article of this series, I highly recommend that you do so.
This is the point where we will develop our JavaScript library that utilizes the functions exposed in the WebAssembly module. I have created a simple template for this purpose. You may notice that we are defining some imports for WASI, but they are all empty. Allow me to explain what WASI is and what it aims to achieve.</description></item><item><title>Writing a Library in C++ and Using it in the Browser with the WASI SDK - Implementing library functions</title><link>https://ercanakyuerek.de/posts/wasi/wasi-sdk-writing-library-in-cpp-3/</link><pubDate>Fri, 24 Feb 2023 00:19:00 +0100</pubDate><guid>https://ercanakyuerek.de/posts/wasi/wasi-sdk-writing-library-in-cpp-3/</guid><description>If you haven&amp;rsquo;t read the second article of this series, I highly recommend that you do so.
In this article, we&amp;rsquo;ll be exploring a more interesting example where we&amp;rsquo;ll construct a bezier curve, evaluate nodes on it, and write a function that gives any position on the curve by a length parameter. To explain briefly, a bezier curve is represented by a parameter t, which varies between 0 and 1 and determines the position of nodes on the curve.</description></item><item><title>Writing a Library in C++ and Using it in the Browser with the WASI SDK - CMake and build scripts</title><link>https://ercanakyuerek.de/posts/wasi/wasi-sdk-writing-library-in-cpp-2/</link><pubDate>Thu, 23 Feb 2023 23:15:00 +0100</pubDate><guid>https://ercanakyuerek.de/posts/wasi/wasi-sdk-writing-library-in-cpp-2/</guid><description>If you haven&amp;rsquo;t read the first article of this series, I highly recommend that you do so.
To simplify the building process, we can create a build script. We have already defined some scripts in our package.json file. At this point, the build-wasm.js file is still empty, so we can create a basic script that first deletes an existing build folder, creates a new one, and runs cmake .. inside it.</description></item><item><title>Writing a Library in C++ and Using it in the Browser with the WASI SDK - Folder structure</title><link>https://ercanakyuerek.de/posts/wasi/wasi-sdk-writing-library-in-cpp-1/</link><pubDate>Thu, 23 Feb 2023 22:00:00 +0100</pubDate><guid>https://ercanakyuerek.de/posts/wasi/wasi-sdk-writing-library-in-cpp-1/</guid><description>You may have already heard that it&amp;rsquo;s possible to write certain parts of your web application using languages like C++ or Rust and compile them into WebAssembly. WebAssembly is a binary format that allows code to be executed on the web and is designed to be efficient, secure, and portable. There are use cases where WebAssembly can be particularly beneficial, such as performing complex and resource-intensive computations for real-time applications or mathematical operations.</description></item><item><title>Roller Coaster Simulation - First results</title><link>https://ercanakyuerek.de/posts/roller-coaster-simulation/first-results/</link><pubDate>Thu, 23 Feb 2023 16:28:20 +0100</pubDate><guid>https://ercanakyuerek.de/posts/roller-coaster-simulation/first-results/</guid><description>I am in the process of developing an open source roller coaster simulator that is designed to achieve a high degree of compatibility with NoLimits 2. To this end, I have adopted the same track generation and roll interpolation techniques employed by NoLimits 2. Although there are some bugs associated with loading NoLimits2 Parks at present, I anticipate that these issues will be resolved in due course, as I continue to refine the nl2park loader.</description></item><item><title>About me</title><link>https://ercanakyuerek.de/about/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ercanakyuerek.de/about/</guid><description>Hey there! I&amp;rsquo;m Ercan Akyürek, a tech enthusiast in my early thirties who&amp;rsquo;s super into all things innovative. I grew up in Germany, surrounded by a mix of German and Turkish cultures that have shaped my view of the world.
My love for computers started way back when I got my first VTech learning computer. I didn&amp;rsquo;t really get coding at first, but I was totally hooked on the endless possibilities it offered.</description></item><item><title>Lightweight hybrid WLED app for mobile and web</title><link>https://ercanakyuerek.de/projects/wled-app/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://ercanakyuerek.de/projects/wled-app/</guid><description>The WLED Hybrid App is a lightweight application designed for both mobile and web platforms. Built atop Preact and React, along with other lightweight libraries, the app prioritizes minimal web bundle size, enabling seamless integration into WLED devices as the primary user interface. Leveraging the robustness of the React and Expo ecosystems, the app offers a native experience on iOS and Android platforms, ensuring a matured and polished user interface. While the previous UI has served its purpose admirably, the time has come for a matured app to meet the evolving needs of WLED users worldwide.</description></item></channel></rss>